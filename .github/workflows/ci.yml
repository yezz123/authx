name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  mypy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: setup uv
        uses: yezz123/setup-uv@v4.1
        with:
          uv-venv: ".venv"

      - name: Install Dependencies
        run: uv sync --group lint --all-extras

      - name: Typecheck with mypy
        run: bash scripts/mypy.sh

  tests-pydantic-v2:

    name: test py${{ matrix.python-version }} on ${{ matrix.os }} with pydantic v2

    runs-on: ${{ matrix.os }}-latest


    strategy:

      matrix:

        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13"]

        os: [ubuntu]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: setup UV
        uses: yezz123/setup-uv@v4.1
        with:
          uv-venv: ".venv"

      - name: Install Dependencies
        run: uv sync --group test --all-extras

      - name: Test with pytest - ${{ matrix.os }} - py${{ matrix.python-version }}
        run: bash scripts/test.sh
        env:
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}-with-deps

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  tests-pydantic-v1:

    name: test py${{ matrix.python-version }} on ${{ matrix.os }} with pydantic v1

    runs-on: ${{ matrix.os }}-latest


    strategy:

      matrix:

        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13"]

        os: [ubuntu]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: setup UV
        uses: yezz123/setup-uv@v4.1
        with:
          uv-venv: ".venv"

      - name: Install Dependencies
        run: uv sync --group test --all-extras

      - name: Install pydantic v1
        run: uv pip install pydantic==1.10.17

      - name: Test with pytest - ${{ matrix.os }} - py${{ matrix.python-version }}
        run: bash scripts/test.sh
        env:
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}-with-deps

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  test-extra:

    name: test py${{ matrix.python-version }} on ${{ matrix.os }} with extra

    runs-on: ${{ matrix.os }}-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:

      matrix:

        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13"]

        os: [ubuntu]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Clone authx extra
        run: git clone https://github.com/yezz123/authx-extra.git --single-branch

      - name: Test Suite - ${{ matrix.os }} - py${{ matrix.python-version }}
        run: bash scripts/test_extra.sh
        env:
          ENV: test
          REDIS_URL: "redis://0.0.0.0:6379"

  # https://github.com/marketplace/actions/alls-green#why
  # used for branch protection checks
  check:
    if: always()

    needs: [mypy, tests-pydantic-v2, tests-pydantic-v1, test-extra]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
